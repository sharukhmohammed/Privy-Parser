package com.findprivy.privyparser.model;

import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import io.realm.RealmObject;
import io.realm.annotations.PrimaryKey;


public class SMSinfo extends RealmObject
{
    //Raw Variables are stored in the object for future/further use if required. Same goes for UUID.
    //Other Variables are declared as per the requirement

    @PrimaryKey
    public String id;
    private String rawSender, rawBody;
    private String bank, merchant, date;
    private float amount;
    private boolean success;

    public SMSinfo()
    {
    }

    public SMSinfo(String rawSender, String rawBody)
    {
        this.rawSender = rawSender;
        this.rawBody = rawBody;

        bank = getBankFromRawSender(rawSender);
        //If Bank name can't be extracted from the sender, it'll be checked in the body
        // Have a note that Android Emulator isn't capable of sending sample SMS with sender of non numeric characters
        if(bank.equals("?")) bank = getBankFromRawSender(rawBody);
        setInfoFromRawBody(rawBody);
        id = UUID.randomUUID().toString();
    }


    private String getBankFromRawSender(String rawSender)
    {
        String bank;
        //Every Bank SMS sender has it's short specified name.
        if (rawSender.toUpperCase().contains("CITI")) bank = "CITI";
        else if (rawSender.toUpperCase().contains("HDFC")) bank = "HDFC";
        else if (rawSender.toUpperCase().contains("ICICI")) bank = "ICICI";
        else bank = "?";
        return bank;
    }

    private void setInfoFromRawBody(String rawBody)
    {
        //RE-Amount: INR\s?([\d,]+).(\d\d)|Rs[.\s]+([\d,]+).(\d\d)
        //RE-Merchant: at ([\w\s,]+)|Info:\s?([\w*]+)|towards ([\w]+\s?[\w]+)
        //RE-Date: on (\d{1,2}-\w{3,4}-\d{0,4}[\d:]+)|on (\d{0,4}-[\w\d]{2}-\d{1,2}[\d:]+)
        //RE-Success: ^((?!declined|failed|could not).)*$

        //Creating Pattern & Matcher Objects for particular data
        Pattern amountPattern = Pattern.compile("INR\\s?([\\d,]+).(\\d\\d)|Rs[.\\s]+([\\d,]+).(\\d\\d)");
        Pattern merchantPattern = Pattern.compile("at ([\\w\\s,]+)|Info:\\s?([\\w*]+)|towards ([\\w]+\\s?[\\w]+)");
        Pattern datePattern = Pattern.compile("on (\\d{1,2}-\\w{3,4}-\\d{0,4}[\\d:]+)|on (\\d{0,4}-[\\w\\d]{2}-\\d{1,2}[\\d:]+)");
        Pattern successPattern = Pattern.compile("^((?!declined|failed|could not).)*$");

        Matcher amountMatcher = amountPattern.matcher(rawBody);
        Matcher merchantMatcher = merchantPattern.matcher(rawBody);
        Matcher dateMatcher = datePattern.matcher(rawBody);
        Matcher successMatcher = successPattern.matcher(rawBody);

        try
        {
            //Here first not null capture group will return RUPEES and second not null capture Group will return PAISE
            if(amountMatcher.find())
            {
                //Finds first not null capture group & Removes commas from the string. For example, 1,200 will be 1200
                float rupees = Float.valueOf(amountMatcher.group(getFirstNotNullCaptureGroup(amountMatcher)).replaceAll("[^\\d.]", ""));
                //Second not null capture group will be paise
                float paise = Float.valueOf("0."+ amountMatcher.group(getFirstNotNullCaptureGroup(amountMatcher) + 1));
                amount = rupees + paise;
            }
            else amount = 0;
            //Finding merchant, date, success
            merchant = merchantMatcher.find() ?
                    merchantMatcher.group(getFirstNotNullCaptureGroup(merchantMatcher)) : "?";
            date = dateMatcher.find() ?
                    dateMatcher.group(getFirstNotNullCaptureGroup(dateMatcher)) : "?";
            success = successMatcher.find();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

    }

    private int getFirstNotNullCaptureGroup(Matcher matcher)
    {
        int i = 1; // 0 will always be default capture group, so starting at 1
        while (matcher.group(i) == null)
            i++;
        return i;
    }


    @Override
    public String toString()
    {
        return "Bank:" + bank + "\n"
                + "Merchant:" + merchant + "\n"
                + "Date:" + date + "\n"
                + "Amount:" + amount + "\n"
                + "Success:" + success + "\n";
    }

    //General Setters and Getters Generated by IDE
    public String getRawSender()
    {
        return rawSender;
    }

    public String getRawBody()
    {
        return rawBody;
    }

    public String getBank()
    {
        return bank;
    }

    public void setBank(String bank)
    {
        this.bank = bank;
    }

    public String getMerchant()
    {
        return merchant;
    }

    public void setMerchant(String merchant)
    {
        this.merchant = merchant;
    }

    public String getDate()
    {
        return date;
    }

    public void setDate(String date)
    {
        this.date = date;
    }

    public float getAmount()
    {
        return amount;
    }

    public void setAmount(float amount)
    {
        this.amount = amount;
    }

    public boolean isSuccess()
    {
        return success;
    }

    public void setSuccess(boolean success)
    {
        this.success = success;
    }

    public String getUuid()
    {
        return id;
    }
}




